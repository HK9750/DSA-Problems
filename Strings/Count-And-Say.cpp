// Leetcode 38. Count and Say

class Solution
{
public:
    string countAndSay(int n)
    {
        string result = "1";
        for (int i = 1; i < n; ++i)
        {
            result = describe(result);
        }
        return result;
    }

private:
    string describe(const string &s)
    {
        string res = "";
        int count = 1;

        for (int i = 1; i < s.length(); ++i)
        {
            if (s[i] == s[i - 1])
            {
                count++;
            }
            else
            {
                res += to_string(count) + s[i - 1];
                count = 1;
            }
        }

        res += to_string(count) + s.back();
        return res;
    }
};

// Explaination:

// The function countAndSay generates the nth term of the "Count and Say" sequence.
// The sequence starts with "1" and each subsequent term is generated by describing the previous term.
// For example, the first few terms are:
// 1. "1" (one 1) -> "11"
// 2. "11" (two 1s) -> "21"
// 3. "21" (one 2, one 1) -> "1211"
// 4. "1211" (one 1, one 2, two 1s) -> "111221"
// 5. "111221" (three 1s, two 2s, one 1) -> "312211"`
// So the sequence is: "1", "11", "21", "1211", "111221", "312211", etc.
// The function uses a helper function describe to generate the next term by counting consecutive digits in the current term.
// It iterates through the string, counting how many times each digit appears consecutively and appending the count and the digit to the result string.
// The process is repeated until the nth term is generated.
// The time complexity of this solution is O(n * m), where n is the input number and m is the length of the string at each step.
// The space complexity is O(m) for the result string at each step.
// The function uses a loop to generate each term, and a helper function to describe the current term.